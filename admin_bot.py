import json
import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv
import datetime
from contextlib import suppress
from aiogram.types import FSInputFile

load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')
CONFIG_PATH = os.path.join(os.path.dirname(__file__), 'config.json')
# --- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ user_id ---
OWNER_ID = int(os.getenv('OWNER_ID'))

from functools import wraps

def owner_only(func):
    @wraps(func)
    async def wrapper(*args, **kwargs):
        message = None
        for arg in args:
            if isinstance(arg, Message):
                message = arg
                break
        if not message:
            message = kwargs.get('message')
        if not message:
            return await func(*args, **kwargs)
        if message.from_user.id != OWNER_ID:
            print(f"[SECURITY] –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ-OWNER: {message.from_user.id}, text: {getattr(message, 'text', None)}")
            await message.answer("<b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.</b>", parse_mode="HTML")
            return
        print(f"[OWNER] –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω: {message.from_user.id}, text: {getattr(message, 'text', None)}")
        return await func(*args, **kwargs)
    return wrapper
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# -----------------------------------
# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
# -----------------------------------

class BotStates(StatesGroup):
    waiting_for_msg = State()
    waiting_for_delay_hours = State()
    waiting_for_delay_minutes = State()
    waiting_for_delay_seconds = State()
    waiting_for_delay_unit = State()
    waiting_for_delay = State()
    selected_group = State()

class ScheduleStates(StatesGroup):
    waiting_for_time = State()
    waiting_for_scheduled_message = State()

class EditScheduleStates(StatesGroup):
    waiting_for_new_time = State()
    waiting_for_new_message = State()

class DeleteScheduleStates(StatesGroup):
    waiting_for_group = State()
    waiting_for_entry = State()

# -----------------------------------
# –ö–æ–Ω—Ñ–∏–≥
# -----------------------------------

def load_config():
    try:
        with open(CONFIG_PATH, 'r') as f:
            data = json.load(f)
            print(f"[LOG] –ó–∞–≥—Ä—É–∂–µ–Ω config: {data}")
            return data
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å config: {e}")
        return {"chats": {}, "active": False, "scheduled": {}, "schedule_active": False}

def save_config(data):
    try:
        with open(CONFIG_PATH, 'w') as f:
            json.dump(data, f, indent=2)
            print(f"[LOG] –°–æ—Ö—Ä–∞–Ω—ë–Ω config: {data}")
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å config: {e}")

# -----------------------------------
# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø
# -----------------------------------
def get_group_keyboard(action_prefix):
    config = load_config()
    buttons = []
    for chat in config["chats"].keys():
        buttons.append([InlineKeyboardButton(text=chat, callback_data=f"{action_prefix}:{chat}")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_groups_reply_keyboard():
    config = load_config()
    buttons = [[KeyboardButton(text=chat)] for chat in config["chats"].keys()]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_back_inline_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])

def get_groups_with_back_keyboard():
    config = load_config()
    buttons = [[KeyboardButton(text=chat)] for chat in config["chats"].keys()]
    buttons.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_edit_group_inline_keyboard(groups):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=group, callback_data=f"edit_schedule_group:{group}")]
            for group in groups
        ]
    )

# -----------------------------------
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
# -----------------------------------

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É")
@owner_only
async def btn_add(message: Message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
    back_button = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        ],
        resize_keyboard=True
    )
    await message.answer("<i> –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å: </i> ", parse_mode="HTML", reply_markup=back_button)

@dp.message(lambda m: m.text and (m.text.startswith("https://t.me/") or m.text.startswith("@")))
@owner_only
async def handle_group_add(message: Message):
    config = load_config()
    link = message.text.strip()
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É @groupname
    if link.startswith("https://t.me/"):
        link = "@" + link.split("https://t.me/")[-1]
    if link.startswith("@"):  # —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –ø–æ—Å–ª–µ username
        link = link.split()[0].split("/")[0]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥—Ä—É–ø–ø—ã —Ç–æ–ª—å–∫–æ –ø–æ @groupname
    groupnames = [k if k.startswith("@") else "@" + k.split("https://t.me/")[-1].split()[0].split("/")[0] for k in config["chats"].keys()]
    if link in groupnames:
        await message.answer("<i> üî∫ –î–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ </i>" , parse_mode="HTML",)
        return
    config["chats"][link] = {"message": None, "delay": 60}
    save_config(config)
    await message.answer(f"<i> üî∏ –ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: </i> {link}", parse_mode="HTML",)

# -----------------------------------
# –°–æ–æ–±—â–µ–Ω–∏–µ
# -----------------------------------
@dp.message(F.text == "üí¨ –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
@owner_only
async def btn_setmsg(message: Message):
    # –°–Ω–∞—á–∞–ª–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –≥—Ä—É–ø–ø–∞–º–∏
    await message.answer("<b> –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: </b>", parse_mode="HTML", reply_markup=get_group_keyboard("msg"))
    # –ó–∞—Ç–µ–º –æ–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    back_button = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )
    await message.answer("<i>–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É </i><b>–ù–∞–∑–∞–¥</b>",
        parse_mode="HTML", reply_markup=back_button)

@dp.callback_query(F.data.startswith("msg:"))
async def group_msg_selected(callback: types.CallbackQuery, state: FSMContext):
    print(f"[CALLBACK] msg: from_user={callback.from_user.id}, data={callback.data}, state={await state.get_state()}")
    chat = callback.data.split("msg:")[1]
    await state.update_data(selected_group=chat)
    await callback.message.answer(f"<b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {chat}. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç, –º–µ–¥–∏–∞, —Ç–µ–∫—Å—Ç + –º–µ–¥–∏–∞.</b>",parse_mode="HTML",)
    await state.set_state(BotStates.waiting_for_msg)
    await callback.answer()

@dp.message(BotStates.waiting_for_msg)
@owner_only
async def handle_msg_input(message: Message, state: FSMContext):
    print(f"[FSM] –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}, message: {message.text}")
    data = await state.get_data()
    chat = data["selected_group"]
    config = load_config()

    if message.photo:
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        file_path = f"media/{photo.file_unique_id}.jpg"

        # —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ—Ç
        os.makedirs("media", exist_ok=True)
        await bot.download_file(file.file_path, destination=file_path)

        config["chats"][chat]["media"] = file_path
        config["chats"][chat]["message"] = message.caption or ""
        config["chats"][chat]["caption_entities"] = [e.model_dump() for e in message.caption_entities] if message.caption_entities else None
        await message.answer(f"<i>üî∏ –ú–µ–¥–∏–∞ + –ø–æ–¥–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è {chat}</i>", parse_mode="HTML",)

    elif message.document:
        file_id = message.document.file_id
        config["chats"][chat]["media"] = file_id
        config["chats"][chat]["message"] = message.caption or ""
        config["chats"][chat]["caption_entities"] = [e.model_dump() for e in message.caption_entities] if message.caption_entities else None
        await message.answer(f"<i> üî∏ –ú–µ–¥–∏–∞ + –ø–æ–¥–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è {chat} </i>",parse_mode="HTML",)
    elif message.text:
        config["chats"][chat]["message"] = message.text
        config["chats"][chat]["entities"] = [e.model_dump() for e in message.entities] if message.entities else None
        config["chats"][chat].pop("media", None)
        config["chats"][chat].pop("caption_entities", None)
        await message.answer(f"<i>üî∏ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è {chat} </i>",parse_mode="HTML",)
    else:
        await message.answer("<b> ‚ô¶Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞.</b>", parse_mode="HTML",)
        return

    save_config(config)
    await message.answer("<b> üîΩ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: </b>", parse_mode="HTML", reply_markup=main_menu)
    await state.clear()

# -----------------------------------
# –ó–∞–¥–µ—Ä–∂–∫–∞ –í—ã–±–æ—Ä –µ–¥–∏–Ω–∏—Ü—ã –≤—Ä–µ–º–µ–Ω–∏ (—Å–µ–∫—É–Ω–¥—ã, –º–∏–Ω—É—Ç—ã, —á–∞—Å—ã)
# -----------------------------------
def format_time(seconds):
    if seconds < 60:
        return f"{seconds} —Å–µ–∫."
    elif seconds < 3600:
        minutes = seconds // 60
        return f"{minutes} –º–∏–Ω."
    elif seconds >= 3600:
        hours = seconds // 3600
        return f"{hours} —á."
time_unit_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚è± –°–µ–∫—É–Ω–¥—ã")],
        [KeyboardButton(text="üïí –ú–∏–Ω—É—Ç—ã")],
        [KeyboardButton(text="‚è≥ –ß–∞—Å—ã")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    ],
    resize_keyboard=True
)
@dp.message(F.text == "‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É")
@owner_only
async def btn_delay(message: Message, state: FSMContext):
    await message.answer("<b> –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏:</b>", parse_mode="HTML", reply_markup=get_group_keyboard("delay"))
    back_button = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )
    await message.answer("<i>–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É </i><b>–ù–∞–∑–∞–¥</b>",
        parse_mode="HTML", reply_markup=back_button)

back_button = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
    resize_keyboard=True
)
@dp.callback_query(F.data.startswith("delay:"))
async def group_delay_selected(callback: types.CallbackQuery, state: FSMContext):
    print(f"[CALLBACK] delay: from_user={callback.from_user.id}, data={callback.data}, state={await state.get_state()}")
    chat = callback.data.split("delay:")[1]
    await state.update_data(selected_group=chat)
    msg = await callback.message.answer("–¢–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: <b>00:00:00</b>", parse_mode="HTML")
    await state.update_data(delay_hours=0, delay_minutes=0, delay_seconds=0, delay_msg_id=msg.message_id)
    ask = await callback.message.answer("<i> –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—ã: </i>", reply_markup=back_button  ,parse_mode="HTML")
    await state.update_data(ask_msg_id=ask.message_id)
    await state.set_state(BotStates.waiting_for_delay_hours)
    await callback.answer()

@dp.message(BotStates.waiting_for_delay_hours)
@owner_only
async def input_delay_hours(message: Message, state: FSMContext):
    print(f"[FSM] –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}, message: {message.text}")
    if message.text == "üîô –ù–∞–∑–∞–¥":
        return  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—à–µ
    try:
        hours = int(message.text)
        if hours < 0 or hours > 23:
            raise ValueError
    except ValueError:
        return await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤ (0-23) </b>", parse_mode="HTML", reply_markup=back_button)
    data = await state.get_data()
    await state.update_data(delay_hours=hours)
    msg_id = data["delay_msg_id"]
    
    # –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await message.bot.edit_message_text(
            text=f"–¢–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: <b>{hours:02d}:00:00</b>",
            chat_id=message.chat.id,
            message_id=msg_id,
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (—á–∞—Å—ã): {e}")
    
    await message.bot.delete_message(message.chat.id, data["ask_msg_id"])
    ask = await message.answer("<i> –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω—É—Ç—ã: </i>", parse_mode="HTML", reply_markup=back_button)
    await state.update_data(ask_msg_id=ask.message_id)
    await state.set_state(BotStates.waiting_for_delay_minutes)

@dp.message(BotStates.waiting_for_delay_minutes)
@owner_only
async def input_delay_minutes(message: Message, state: FSMContext):
    print(f"[FSM] –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}, message: {message.text}")
    if message.text == "üîô –ù–∞–∑–∞–¥":
        return  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—à–µ
    try:
        minutes = int(message.text)
        if minutes < 0 or minutes > 59:
            raise ValueError
    except ValueError:
        return await message.answer("<b> –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç (0-59) </b>", parse_mode="HTML", reply_markup=back_button)
    data = await state.get_data()
    await state.update_data(delay_minutes=minutes)
    msg_id = data["delay_msg_id"]
    hours = data["delay_hours"]
    
    # –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await message.bot.edit_message_text(
            text=f"–¢–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: <b>{hours:02d}:{minutes:02d}:00</b>",
            chat_id=message.chat.id,
            message_id=msg_id,
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–∏–Ω—É—Ç—ã): {e}")
    
    await message.bot.delete_message(message.chat.id, data["ask_msg_id"])
    ask = await message.answer("<i> –í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—É–Ω–¥—ã: </i>", parse_mode="HTML", reply_markup=back_button)
    await state.update_data(ask_msg_id=ask.message_id)
    await state.set_state(BotStates.waiting_for_delay_seconds)

@dp.message(BotStates.waiting_for_delay_seconds)
@owner_only
async def input_delay_seconds(message: Message, state: FSMContext):
    print(f"[FSM] –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}, message: {message.text}")
    if message.text == "üîô –ù–∞–∑–∞–¥":
        return  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—à–µ
    try:
        seconds = int(message.text)
        if seconds < 0 or seconds > 59:
            raise ValueError
    except ValueError:
        return await message.answer("<b> –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ (0-59) </b> ", parse_mode="HTML", reply_markup=back_button)
    data = await state.get_data()
    hours = data["delay_hours"]
    minutes = data["delay_minutes"]
    await state.update_data(delay_seconds=seconds)
    msg_id = data["delay_msg_id"]
    
    # –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await message.bot.edit_message_text(
            text=f"–¢–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: <b>{hours:02d}:{minutes:02d}:{seconds:02d}</b>",
            chat_id=message.chat.id,
            message_id=msg_id,
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–µ–∫—É–Ω–¥—ã): {e}")
    
    await message.bot.delete_message(message.chat.id, data["ask_msg_id"])
    total_seconds = hours * 3600 + minutes * 60 + seconds
    config = load_config()
    chat = data["selected_group"]
    config["chats"][chat]["delay"] = total_seconds
    save_config(config)
    await message.answer(f"<i>üî∏ –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è {chat} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {hours:02d}:{minutes:02d}:{seconds:02d} </i>", parse_mode="HTML",)
    await state.clear()
    await message.answer("<b> üîΩ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: </b>", parse_mode="HTML", reply_markup=main_menu)

# -----------------------------------
# –£–¥–∞–ª–µ–Ω–∏–µ
# -----------------------------------

@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É")
@owner_only
async def btn_remove(message: Message):
    config = load_config()
    if not config["chats"]:
        await message.answer("<i>üî∂ –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç.</i>", parse_mode="HTML")
        return
    # –°–Ω–∞—á–∞–ª–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –≥—Ä—É–ø–ø–∞–º–∏
    await message.answer("<b> –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: </b>", parse_mode="HTML", reply_markup=get_group_keyboard("remove"))
    # –ó–∞—Ç–µ–º –æ–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    back_button = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )
    await message.answer("<i>–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É </i><b>–ù–∞–∑–∞–¥</b>",
        parse_mode="HTML", reply_markup=back_button)

@dp.callback_query(F.data.startswith("remove:"))
async def handle_remove(callback: types.CallbackQuery):
    print(f"[CALLBACK] remove: from_user={callback.from_user.id}, data={callback.data}")
    chat = callback.data.split("remove:")[1]
    config = load_config()
    removed_media = []
    # –£–¥–∞–ª—è–µ–º –∏–∑ chats
    if chat in config["chats"]:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –º–µ–¥–∏–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        media_path = config["chats"][chat].get("media")
        if media_path and os.path.isfile(media_path):
            removed_media.append(media_path)
        del config["chats"][chat]
    # –£–¥–∞–ª—è–µ–º –∏–∑ scheduled
    if "scheduled" in config and chat in config["scheduled"]:
        for entry in config["scheduled"][chat]:
            media_path = entry.get("media")
            if media_path and os.path.isfile(media_path):
                removed_media.append(media_path)
        del config["scheduled"][chat]
    # –£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã
    for path in removed_media:
        with suppress(Exception):
            os.remove(path)
        save_config(config)
    await callback.message.answer(f"<i> ‚ô¶Ô∏è –ì—Ä—É–ø–ø–∞ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã: {chat} </i>", parse_mode="HTML",)
    if not config["chats"]:
        await callback.message.answer("<i>üî∂ –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç.</i>", parse_mode="HTML")
    await callback.answer()

# -----------------------------------
# –°—Ç–∞—Ä—Ç/—Å—Ç–æ–ø/—Å–ø–∏—Å–æ–∫
# -----------------------------------

@dp.message(F.text == "üìí –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø")
@owner_only
async def btn_list_groups(message: Message):
    config = load_config()
    if not config["chats"]:
        return await message.answer("<i> üî∂ –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç. </i>", parse_mode="HTML",)
    text = "\n".join([f"{chat}" for chat in config["chats"].keys()])
    await message.answer(f"<b> –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø:\n{text} </b>", parse_mode="HTML",)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ ---
schedule_broadcast_active = False

def set_schedule_active(active: bool):
    config = load_config()
    config["schedule_active"] = active
    save_config(config)

@dp.message(F.text == "üü¢ –°—Ç–∞—Ä—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
@owner_only
async def btn_launch(message: Message):
    config = load_config()
    config["active"] = True
    save_config(config)
    await message.answer("<b>‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞.</b>", parse_mode="HTML")

@dp.message(F.text == "üî¥ –°—Ç–æ–ø ")
@owner_only
async def btn_stop(message: Message):
    config = load_config()
    config["active"] = False
    save_config(config)
    await message.answer("<b>‚õîÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. </b>" , parse_mode="HTML")

@dp.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
@owner_only
async def schedule_edit_entry(message: Message, state: FSMContext):
    config = load_config()
    if not config.get("scheduled"):
        return await message.answer("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
    groups = list(config["scheduled"].keys())
    if not groups:
        return await message.answer("–ù–µ—Ç –≥—Ä—É–ø–ø —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.")
    await message.answer(
        "<b> –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: </b>", parse_mode='html',
        reply_markup=get_edit_group_inline_keyboard(groups)
    )
    await state.clear()

def get_schedule_entry_preview(entry, n=20):
    text = entry.get("message", "")
    preview = text[:n] + ("..." if len(text) > n else "")
    return f"{entry['time']} | {preview}"

def get_edit_entry_inline_keyboard(entries):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=get_schedule_entry_preview(entry), callback_data=f"edit_schedule_entry:{i}")]
            for i, entry in enumerate(entries)
        ]
    )

@dp.callback_query(F.data.startswith("edit_schedule_group:"))
async def edit_schedule_group_selected(callback: types.CallbackQuery, state: FSMContext):
    print(f"[CALLBACK] edit_schedule_group: from_user={callback.from_user.id}, data={callback.data}, state={await state.get_state()}")
    group = callback.data.split(":", 1)[1]
    await state.update_data(selected_group=group)
    config = load_config()
    entries = config.get("scheduled", {}).get(group, [])
    if not entries:
        await callback.message.answer("<i>üî∏ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã. </i>",parse_mode='html')
        await callback.answer()
        return
    await callback.message.answer(
        "<b> –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: </b>",parse_mode='html',
        reply_markup=get_edit_entry_inline_keyboard(entries)
    )
    await state.set_state(BotStates.selected_group)  # –≤—Ä–µ–º–µ–Ω–Ω–æ, –¥–∞–ª–µ–µ –±—É–¥–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.answer()

@dp.callback_query(F.data.startswith("edit_schedule_entry:"))
async def edit_schedule_entry_selected(callback: types.CallbackQuery, state: FSMContext):
    print(f"[CALLBACK] edit_schedule_entry: from_user={callback.from_user.id}, data={callback.data}, state={await state.get_state()}")
    entry_idx = int(callback.data.split(":", 1)[1])
    data = await state.get_data()
    group = data["selected_group"]
    await state.update_data(edit_entry_idx=entry_idx)
    await callback.message.answer(
        "<i> –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú:–°–°) –∏–ª–∏ 0, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–µ–µ: </i>" , parse_mode="HTML")
    await state.set_state(EditScheduleStates.waiting_for_new_time)
    await callback.answer()

@dp.message(EditScheduleStates.waiting_for_new_time)
async def save_new_time(message: Message, state: FSMContext):
    print(f"[FSM] –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}, message: {message.text}")
    import re
    data = await state.get_data()
    group = data["selected_group"]
    idx = data["edit_entry_idx"]
    config = load_config()
    entry = config["scheduled"][group][idx]
    if message.text.strip() != "0":
        time_pattern = r"^([01]?\d|2[0-3]):[0-5]\d:[0-5]\d$"
        if not re.match(time_pattern, message.text):
            return await message.answer("<b> –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:–°–° (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:35:00) –∏–ª–∏ 0, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–µ–µ </b>" , parse_mode="HTML")
        entry["time"] = message.text.strip()
    save_config(config)
    await message.answer("<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ 0, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</i>",parse_mode='html')
    await state.set_state(EditScheduleStates.waiting_for_new_message)

@dp.message(EditScheduleStates.waiting_for_new_message)
async def save_new_message(message: Message, state: FSMContext):
    print(f"[FSM] –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}, message: {message.text}")
    data = await state.get_data()
    group = data["selected_group"]
    idx = data["edit_entry_idx"]
    config = load_config()
    entry = config["scheduled"][group][idx]
    if message.text and message.text.strip() == "0":
        # –û—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–∂–Ω–∏–π —Ç–µ–∫—Å—Ç/–º–µ–¥–∏–∞
        await message.answer("<i>üî∏–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</i>", parse_mode="HTML")
        await state.clear()
        return
    if message.photo:
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        file_path = f"media/{photo.file_unique_id}.jpg"
        os.makedirs("media", exist_ok=True)
        await bot.download_file(file.file_path, destination=file_path)
        entry["media"] = file_path
        entry["message"] = message.caption or ""
        entry["caption_entities"] = [e.model_dump() for e in message.caption_entities] if message.caption_entities else None
    elif message.document:
        file_id = message.document.file_id
        entry["media"] = file_id
        entry["message"] = message.caption or ""
        entry["caption_entities"] = [e.model_dump() for e in message.caption_entities] if message.caption_entities else None
    elif message.text:
        entry["message"] = message.text
        entry["entities"] = [e.model_dump() for e in message.entities] if message.entities else None
        entry.pop("media", None)
        entry.pop("caption_entities", None)
    else:
        await message.answer("<i> ‚ô¶Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞, –ª–∏–±–æ 0 —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–µ–µ.</i>", parse_mode="HTML")
        return
    save_config(config)
    await message.answer("<i> üî∏–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ! </i>", parse_mode="HTML")
    await state.clear()

@dp.callback_query(F.data == "edit_entry_back")
async def edit_entry_back(callback: types.CallbackQuery, state: FSMContext):
    print(f"[CALLBACK] edit_entry_back: from_user={callback.from_user.id}, data={callback.data}, state={await state.get_state()}")
    data = await state.get_data()
    group = data["selected_group"]
    config = load_config()
    entries = config.get("scheduled", {}).get(group, [])
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_edit_entry_inline_keyboard(entries)
    )
    await callback.answer()

# -----------------------------------
# –ö–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é Telegram
# -----------------------------------

async def set_bot_commands():
    commands = [
        BotCommand(command="start", description="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é")
    ]
    await bot.set_my_commands(commands)

# -----------------------------------
# –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ ---
# -----------------------------------
schedule_broadcast_task = None
delay_broadcast_task = None

async def schedule_broadcast_loop():
    print("[DEBUG] schedule_broadcast_loop –∑–∞–ø—É—â–µ–Ω")
    while True:
        config = load_config()
        if not config.get("schedule_active", False):
            print("[LOG] schedule_broadcast_loop: schedule_active = False, sleep 5s")
            await asyncio.sleep(5)
            continue
        now = datetime.datetime.now().time()
        for group, entries in config.get("scheduled", {}).items():
            print(f"[LOG] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group}, entries: {entries}")
            for entry in entries:
                try:
                    t = datetime.datetime.strptime(entry["time"], "%H:%M:%S").time()
                except Exception as e:
                    print(f"[ERROR] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ entry: {entry}, –æ—à–∏–±–∫–∞: {e}")
                    continue
                last_sent = entry.get("last_sent_date")
                today_str = datetime.datetime.now().strftime("%Y-%m-%d")
                if last_sent == today_str:
                    print(f"[LOG] –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è {group} –≤ {entry['time']}")
                    continue
                now_seconds = now.hour*3600 + now.minute*60 + now.second
                t_seconds = t.hour*3600 + t.minute*60 + t.second
                if abs(now_seconds - t_seconds) <= 30:
                    print(f"[LOG] –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {group}: {entry['time']}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º...")
                    await send_scheduled_message(group, entry)
                    entry["last_sent_date"] = today_str
                    save_config(config)
        await asyncio.sleep(20)

async def send_scheduled_message(group, entry):
    print(f"[DEBUG] send_scheduled_message –¥–ª—è {group}, entry: {entry}")
    chat = group
    try:
        if entry.get("media"):
            print(f"[LOG] –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ –≤ {chat}: {entry['media']}")
            if entry["media"].endswith(".jpg") or entry["media"].endswith(".png"):
                input_file = FSInputFile(entry["media"])
                await bot.send_photo(chat_id=chat, photo=input_file, caption=entry.get("message", ""), caption_entities=[types.MessageEntity.model_validate(e) for e in entry.get("caption_entities", [])] if entry.get("caption_entities") else None)
            else:
                input_file = FSInputFile(entry["media"])
                await bot.send_document(chat_id=chat, document=input_file, caption=entry.get("message", ""), caption_entities=[types.MessageEntity.model_validate(e) for e in entry.get("caption_entities", [])] if entry.get("caption_entities") else None)
        elif entry.get("message"):
            print(f"[LOG] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ {chat}: {entry['message']}")
            await bot.send_message(chat_id=chat, text=entry["message"], entities=[types.MessageEntity.model_validate(e) for e in entry.get("entities", [])] if entry.get("entities") else None, parse_mode=None)
        else:
            print(f"[WARN] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat}")
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –≤ {chat}: {e}")

async def delay_broadcast_loop():
    print("[DEBUG] delay_broadcast_loop –∑–∞–ø—É—â–µ–Ω")
    while True:
        config = load_config()
        if not config.get("active", False):
            print("[LOG] delay_broadcast_loop: active = False, sleep 5s")
            await asyncio.sleep(5)
            continue
        for group, data in config.get("chats", {}).items():
            print(f"[LOG] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {group}, data: {data}")
            try:
                if data.get("media"):
                    print(f"[LOG] –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ –≤ {group}: {data['media']}")
                    if data["media"].endswith(".jpg") or data["media"].endswith(".png"):
                        input_file = FSInputFile(data["media"])
                        await bot.send_photo(chat_id=group, photo=input_file, caption=data.get("message", ""), caption_entities=[types.MessageEntity.model_validate(e) for e in data.get("caption_entities", [])] if data.get("caption_entities") else None)
                    else:
                        input_file = FSInputFile(data["media"])
                        await bot.send_document(chat_id=group, document=input_file, caption=data.get("message", ""), caption_entities=[types.MessageEntity.model_validate(e) for e in data.get("caption_entities", [])] if data.get("caption_entities") else None)
                elif data.get("message"):
                    print(f"[LOG] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ {group}: {data['message']}")
                    await bot.send_message(chat_id=group, text=data["message"], entities=[types.MessageEntity.model_validate(e) for e in data.get("entities", [])] if data.get("entities") else None, parse_mode=None)
                else:
                    print(f"[WARN] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {group}")
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∑–∞–¥–µ—Ä–∂–∫–µ –≤ {group}: {e}")
        delays = [data.get("delay", 60) for data in config.get("chats", {}).values()]
        delay = min(delays) if delays else 60
        print(f"[LOG] –ñ–¥—ë–º {delay} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
        await asyncio.sleep(delay)

# --- –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ---
async def main():
    global schedule_broadcast_task, delay_broadcast_task
    print("[LOG] main() —Å—Ç–∞—Ä—Ç—É–µ—Ç")
    await set_bot_commands()
    print("[LOG] set_bot_commands –≤—ã–ø–æ–ª–Ω–µ–Ω")
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    schedule_broadcast_task = asyncio.create_task(schedule_broadcast_loop())
    print("[LOG] schedule_broadcast_loop –∑–∞–ø—É—â–µ–Ω")
    delay_broadcast_task = asyncio.create_task(delay_broadcast_loop())
    print("[LOG] delay_broadcast_loop –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)
    print("[LOG] dp.start_polling –∑–∞–≤–µ—Ä—à—ë–Ω")

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É")],
        [KeyboardButton(text="üóìÔ∏è –ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"), KeyboardButton(text="‚è≥ –ü–æ –∑–∞–¥–µ—Ä–∂–∫–µ")],
        [KeyboardButton(text="üìí –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø")],
        [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É")],
    ],
    resize_keyboard=True
)

# --- –ú–µ–Ω—é –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é ---
schedule_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üü¢ –°—Ç–∞—Ä—Ç"), KeyboardButton(text="üî¥ –°—Ç–æ–ø")],
        [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è"), KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True
)

# --- –ú–µ–Ω—é –ø–æ –∑–∞–¥–µ—Ä–∂–∫–µ ---
spam_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí¨ –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"), KeyboardButton(text="‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É")],
        [KeyboardButton(text="üü¢ –°—Ç–∞p—Ç"), KeyboardButton(text="üî¥ C—Ç–æ–ø")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True
)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /start ---
@dp.message(CommandStart())
@owner_only
async def cmd_start(message: Message, state: FSMContext):
    print(f"[FSM] –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}, message: {message.text}")
    await state.clear()
    await message.answer(
        "<b>üîΩ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
        parse_mode="HTML",
        reply_markup=main_menu
    )

# --- –°—Ç–∞—Ä—Ç/—Å—Ç–æ–ø –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é ---
@dp.message(F.text == "üü¢ –°—Ç–∞—Ä—Ç")
@owner_only
async def schedule_start(message: Message, state: FSMContext):
    global schedule_broadcast_active
    if schedule_broadcast_active:
        await message.answer("<i>–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.</i>", parse_mode="HTML")
        return
    schedule_broadcast_active = True
    set_schedule_active(True)
    await message.answer("<b>üü¢ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∑–∞–ø—É—â–µ–Ω–∞.</b>", parse_mode='html')

@dp.message(F.text == "üî¥ –°—Ç–æ–ø")
@owner_only
async def schedule_stop(message: Message, state: FSMContext):
    global schedule_broadcast_active
    if not schedule_broadcast_active:
        await message.answer("<i>–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.</i>", parse_mode='html')
        return
    schedule_broadcast_active = False
    set_schedule_active(False)
    await message.answer("<b>üî¥Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.</b>", parse_mode='html')

# --- –ù–∞–∑–∞–¥ –¥–ª—è –º–µ–Ω—é –ø–æ –∑–∞–¥–µ—Ä–∂–∫–µ ---
@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
@owner_only
async def spam_back_to_main_menu(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –º–µ–Ω—é –ø–æ –∑–∞–¥–µ—Ä–∂–∫–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    # –ï—Å–ª–∏ –±—ã–ª –≤ –º–µ–Ω—é –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    # FSM: –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ–Ω—é –≤ state
    data = await state.get_data()
    last_menu = data.get('last_menu')
    if last_menu == 'schedule':
        await message.answer(" ", reply_markup=schedule_menu)
    else:
        await message.answer("<b>üîΩ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>", parse_mode="HTML", reply_markup=main_menu)
    await state.clear()

# --- –ü—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω—é –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω—è–µ–º last_menu ---
@dp.message(F.text == "üóìÔ∏è –ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
@owner_only
async def btn_schedule(message: Message, state: FSMContext):
    config = load_config()
    if not config["chats"] and (not config.get("scheduled") or not config["scheduled"]):
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        config["schedule_active"] = False
        save_config(config)
        await message.answer("<i>üî∂ –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç. –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.</i>", parse_mode="HTML")
        return
    await state.update_data(last_menu='schedule')
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=get_group_keyboard("schedule")
    )
    await message.answer("<i>–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É </i><b>–ù–∞–∑–∞–¥</b>",
        parse_mode="HTML", reply_markup=schedule_menu)
    await state.clear()

@dp.callback_query(F.data.startswith("schedule:"))
async def schedule_group_selected(callback: types.CallbackQuery, state: FSMContext):
    print(f"[CALLBACK] schedule: from_user={callback.from_user.id}, data={callback.data}, state={await state.get_state()}")
    chat = callback.data.split("schedule:")[1]
    await state.update_data(selected_group=chat)
    await callback.message.answer("<b> –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:–°–° (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30:25): </b>" , parse_mode="HTML")
    await state.set_state(ScheduleStates.waiting_for_time)
    await callback.answer()

@dp.message(ScheduleStates.waiting_for_time)
@owner_only
async def schedule_input_time(message: Message, state: FSMContext):
    print(f"[FSM] –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}, message: {message.text}")
    import re
    time_pattern = r"^([01]?\d|2[0-3]):[0-5]\d:[0-5]\d$"
    if not re.match(time_pattern, message.text):
        return await message.answer("<i> –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:–°–° </i>", parse_mode="HTML")
    await state.update_data(scheduled_time=message.text)
    await message.answer("<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç, –º–µ–¥–∏–∞, —Ç–µ–∫—Å—Ç+–º–µ–¥–∏–∞):</b>",parse_mode="HTML")
    await state.set_state(ScheduleStates.waiting_for_scheduled_message)

@dp.message(ScheduleStates.waiting_for_scheduled_message)
@owner_only
async def schedule_input_message(message: Message, state: FSMContext):
    print(f"[FSM] –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}, message: {message.text}")
    if not (message.text or message.photo or message.document):
        await message.answer("<i> ‚ô¶Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞. </i> ", parse_mode="HTML",)
        return
    data = await state.get_data()
    chat = data["selected_group"]
    scheduled_time = data["scheduled_time"]
    config = load_config()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    if "scheduled" in config and chat in config["scheduled"]:
        for entry in config["scheduled"][chat]:
            if entry["time"] == scheduled_time:
                await message.answer(
                    f"<i> ‚ô¶Ô∏è –ù–∞ {scheduled_time} —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è. </i>",
                    parse_mode="HTML"
                )
                await message.answer(
                    "<b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:–°–° (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30:25):</b>",
                    parse_mode="HTML"
                )
                await state.set_state(ScheduleStates.waiting_for_time)
                return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏/–∏–ª–∏ –º–µ–¥–∏–∞
    entry = {"time": scheduled_time}
    if message.photo:
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        file_path = f"media/{photo.file_unique_id}.jpg"
        os.makedirs("media", exist_ok=True)
        await bot.download_file(file.file_path, destination=file_path)
        entry["media"] = file_path
        entry["message"] = message.caption or ""
        entry["caption_entities"] = [e.model_dump() for e in message.caption_entities] if message.caption_entities else None
    elif message.document:
        file_id = message.document.file_id
        entry["media"] = file_id
        entry["message"] = message.caption or ""
        entry["caption_entities"] = [e.model_dump() for e in message.caption_entities] if message.caption_entities else None
    elif message.text:
        entry["message"] = message.text
        entry["entities"] = [e.model_dump() for e in message.entities] if message.entities else None
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ config
    if "scheduled" not in config:
        config["scheduled"] = {}
    if chat not in config["scheduled"]:
        config["scheduled"][chat] = []
    config["scheduled"][chat].append(entry)
    save_config(config)
    await message.answer(f"<i>üî∏ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –¥–ª—è {chat} –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {scheduled_time} </i>", parse_mode="HTML")
    await state.clear()
    await message.answer("<b> üîΩ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: </b>", parse_mode="HTML", reply_markup=main_menu)

@dp.message(F.text == "‚è≥ –ü–æ –∑–∞–¥–µ—Ä–∂–∫–µ")
@owner_only
async def btn_spam_menu(message: Message, state: FSMContext):
    config = load_config()
    if not config["chats"]:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –∑–∞–¥–µ—Ä–∂–∫–µ
        config["active"] = False
        save_config(config)
        await message.answer("<i>üî∂ –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç. –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –∑–∞–¥–µ—Ä–∂–∫–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.</i>", parse_mode="HTML")
        return
    await state.clear()
    await message.answer(
        "<i>–°–ø–∞–º –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º —Å—Ä–∞–∑—É.\n\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É </i><b>–ù–∞–∑–∞–¥</b>",
        parse_mode="HTML",
        reply_markup=spam_menu
    )

@dp.message(F.text == "üü¢ –°—Ç–∞p—Ç")
@owner_only
async def btn_launch_spam(message: Message):
    config = load_config()
    if config.get("active", False):
        await message.answer("<i>–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –∑–∞–¥–µ—Ä–∂–∫–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.</i>", parse_mode="HTML", reply_markup=spam_menu)
        return
    config["active"] = True
    save_config(config)
    await message.answer("<b>üü¢ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –∑–∞–¥–µ—Ä–∂–∫–µ –∑–∞–ø—É—â–µ–Ω–∞.</b>", parse_mode="HTML", reply_markup=spam_menu)

@dp.message(F.text == "üî¥ C—Ç–æ–ø")
@owner_only
async def btn_stop_spam(message: Message):
    config = load_config()
    if not config.get("active", False):
        await message.answer("<i>–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –∑–∞–¥–µ—Ä–∂–∫–µ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.</i>", parse_mode="HTML", reply_markup=spam_menu)
        return
    config["active"] = False
    save_config(config)
    await message.answer("<b>üî¥Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –∑–∞–¥–µ—Ä–∂–∫–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.</b>", parse_mode="HTML", reply_markup=spam_menu)

@dp.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å")
@owner_only
async def delete_schedule_entry_start(message: Message, state: FSMContext):
    print(f"[FSM] –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}, message: {message.text}")
    config = load_config()
    groups = list(config.get("scheduled", {}).keys())
    if not groups:
        await message.answer("<i> –ù–µ—Ç –≥—Ä—É–ø–ø —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é. </i>")
        return
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=group, callback_data=f"delete_schedule_group:{group}")] for group in groups]
    )
    await message.answer("<b> –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å: </b>", reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(DeleteScheduleStates.waiting_for_group)

@dp.callback_query(F.data.startswith("delete_schedule_group:"), DeleteScheduleStates.waiting_for_group)
async def delete_schedule_group_selected(callback: types.CallbackQuery, state: FSMContext):
    print(f"[CALLBACK] delete_schedule_group: from_user={callback.from_user.id}, data={callback.data}, state={await state.get_state()}")
    group = callback.data.split(":", 1)[1]
    config = load_config()
    entries = config.get("scheduled", {}).get(group, [])
    if not entries:
        await callback.message.answer("<i>üî∏ –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é. </i> ", parse_mode="HTML")
        await callback.answer()
        return
    await state.update_data(selected_group=group)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{entry['time']} | {entry.get('message', '')[:20]}", callback_data=f"delete_schedule_entry:{i}")]
            for i, entry in enumerate(entries)
        ] + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="delete_schedule_back")]]
    )
    await callback.message.answer("<b> –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: </b>", reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(DeleteScheduleStates.waiting_for_entry)
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_schedule_entry:"), DeleteScheduleStates.waiting_for_entry)
async def delete_schedule_entry_selected(callback: types.CallbackQuery, state: FSMContext):
    print(f"[CALLBACK] delete_schedule_entry: from_user={callback.from_user.id}, data={callback.data}, state={await state.get_state()}")
    idx = int(callback.data.split(":", 1)[1])
    data = await state.get_data()
    group = data["selected_group"]
    config = load_config()
    entries = config.get("scheduled", {}).get(group, [])
    if 0 <= idx < len(entries):
        removed = entries.pop(idx)
        save_config(config)
        await callback.message.answer(f"<i>‚ô¶Ô∏è –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {removed['time']}</i>", parse_mode="HTML")
    # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è ‚Äî –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –∑–∞–ø–∏—Å–∏, —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä, –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã
    if entries:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"{entry['time']} | {entry.get('message', '')[:20]}", callback_data=f"delete_schedule_entry:{i}")]
                for i, entry in enumerate(entries)
            ] + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="delete_schedule_back")]]
        )
        await callback.message.answer("<b> –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: </b>", reply_markup=keyboard, parse_mode="HTML")
        await state.set_state(DeleteScheduleStates.waiting_for_entry)
    else:
        await callback.message.answer("<i> –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –±–æ–ª—å—à–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é. </i>", parse_mode="HTML")
        await state.set_state(DeleteScheduleStates.waiting_for_group)
        # –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        groups = list(config.get("scheduled", {}).keys())
        if groups:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text=group, callback_data=f"delete_schedule_group:{group}")] for group in groups]
            )
            await callback.message.answer("<b> –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å: </b>", parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "delete_schedule_back", DeleteScheduleStates.waiting_for_entry)
async def delete_schedule_back_to_group(callback: types.CallbackQuery, state: FSMContext):
    print(f"[CALLBACK] delete_schedule_back: from_user={callback.from_user.id}, data={callback.data}, state={await state.get_state()}")
    config = load_config()
    groups = list(config.get("scheduled", {}).keys())
    if not groups:
        await callback.message.answer("<i>üî∏ –ù–µ—Ç –≥—Ä—É–ø–ø —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é. </i>")
        await state.clear()
        await callback.answer()
        return
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=group, callback_data=f"delete_schedule_group:{group}")] for group in groups]
    )
    await callback.message.answer("<b> –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å: </b>", reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(DeleteScheduleStates.waiting_for_group)
    await callback.answer()

async def run_adminbot():
    await main()